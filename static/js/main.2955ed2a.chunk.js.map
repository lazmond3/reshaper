{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["ButtonExampleButton","props","style","display","marginLeft","Button","onClick","listener","text","ButtonATag","as","href","url","convertNewLineToSpace","replace","App","useState","rawText","setRawText","useEffect","width","margin","marginTop","Form","TextArea","onChange","e","target","value","placeholder","minHeight","marginBottom","document","getElementById","select","execCommand","encodeURI","readonly","id","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2PAKMA,EAAsB,SAACC,GAAD,OAC1B,yBAAKC,MAAO,CAAEC,QAAS,SAAUC,WAAY,QAC7C,kBAACC,EAAA,EAAD,CAAQC,QAASL,EAAMM,UAAYN,EAAMO,QAGrCC,EAAa,SAACR,GAAD,OACjB,yBAAKC,MAAO,CAACC,QAAS,SAAUC,WAAY,QAC1C,kBAACC,EAAA,EAAD,CAAQK,GAAG,IAAIC,KAAMV,EAAMW,KAExBX,EAAMO,QAMPK,EAAwB,SAACL,GAO7B,OANkBA,EAAKM,QAAQ,sBAAuB,aACnDA,QAAQ,MAAO,KACfA,QAAQ,MAAO,KACfA,QAAQ,MAAO,OACfA,QAAQ,OAAQ,IAChBA,QAAQ,yBAA0B,UAkDxBC,MA9Cf,WAAgB,IAAD,EACiBC,mBAAS,IAD1B,mBACNC,EADM,KACGC,EADH,KASb,OALAC,qBAAU,cAEP,CAACF,IAIF,yBAAKf,MAAO,CACVkB,MAAO,QACPC,OAAQ,OACRC,UAAW,SAEX,uDACA,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAUC,SAVO,SAACC,GAAD,OAAYR,EAAWQ,EAAEC,OAAOC,QAUbA,MAAOX,EAASY,YAAY,wBAAS3B,MAAO,CAAE4B,UAAW,QAG/F,yBAAK5B,MAAO,CACVoB,UAAW,OACXS,aAAc,SAEd,kBAAC,EAAD,CAAqBxB,SAAU,SAAAmB,GAC5BM,SAASC,eAAe,aAAqBC,SAC9CF,SAASG,YAAY,SACpB3B,KAAM,qDACT,kBAAC,EAAD,CAAYI,IAAG,kFAA6EwB,UAAUvB,EAAsBI,KAAaT,KAAM,uBAC/I,kBAAC,EAAD,CAAYI,IAAG,oDAA+CwB,UAAUvB,EAAsBI,KAAaT,KAAM,uBAGnH,kBAACe,EAAA,EAAD,CAAMc,UAAQ,GACZ,kBAACb,EAAA,EAAD,CAAUc,GAAI,YAAaV,MAAOf,EAAsBI,GAAUY,YAAY,6CAAU3B,MAAO,CAAE4B,UAAW,QAE9G,6BACE,sDACA,4BACE,kHACA,gGCzDUS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,OCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFd,SAASC,eAAe,SDgIpB,kBAAmBc,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.2955ed2a.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Form, TextArea, Button } from 'semantic-ui-react'\n// import logo from './logo.svg';\n// import './App.css';\n\nconst ButtonExampleButton = (props:{ text: string,  listener?: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void }) =>\n (<div style={{ display: \"inline\", marginLeft: \"5px\" }}>\n  <Button onClick={props.listener} >{props.text}</Button>\n  </div>\n)\nconst ButtonATag = (props: {url: string, text:string}) => (\n  <div style={{display: \"inline\", marginLeft: \"5px\"}}>\n    <Button as=\"a\" href={props.url}>\n    {/* <Button as=\"a\" href={\"https://translate.google.co.jp/#view=home&op=translate&sl=en&tl=ja&text=\" + encodeURI(query)}> */}\n      {props.text}\n    </Button>\n\n  </div>\n)\n\nconst convertNewLineToSpace = (text: string): string => {\n  const newSpaced = text.replace(/([0-9]+)\\.([0-9]+)/g, \"##$1_$2##\")\n    .replace(/\\n/g, \" \")\n    .replace(/ +/g, \" \")\n    .replace(/\\./g, \".\\n\")\n    .replace(/^ +/g, \"\")\n    .replace(/##([0-9])+_([0-9]+)##/g, \"$1.$2\")\n  return newSpaced\n}\n\nfunction App() {\n  const [rawText, setRawText] = useState(\"\")\n  // const [convertedText, setConvertedText] = useState(\"\")\n\n  useEffect(() => {\n\n  }, [rawText])\n  const setTextHandler = (e: any) => setRawText(e.target.value)\n\n  return (\n    <div style={{\n      width: \"800px\",\n      margin: \"auto\",\n      marginTop: \"50px\"\n    }}>\n      <h1>Reshaper (Remove Space)</h1>\n      <Form>\n        <TextArea onChange={setTextHandler} value={rawText} placeholder='pdfの文字' style={{ minHeight: 100 }} />\n      </Form>\n\n      <div style={{\n        marginTop: \"20px\",\n        marginBottom: \"20px\"\n      }}>\n        <ButtonExampleButton listener={e => {\n          (document.getElementById(\"clipinput\") as any).select()\n          document.execCommand(\"copy\");\n        }} text={\"結果をコピーする\"} />\n        <ButtonATag url={`https://translate.google.co.jp/#view=home&op=translate&sl=en&tl=ja&text=${encodeURI(convertNewLineToSpace(rawText))}`} text={\"Google翻訳\"} />\n        <ButtonATag url={`https://www.deepl.com/ja/translator#en/ja/${encodeURI(convertNewLineToSpace(rawText))}`} text={\"DeepL翻訳\"} />\n      </div>\n\n      <Form readonly>\n        <TextArea id={\"clipinput\"} value={convertNewLineToSpace(rawText)} placeholder='変換後の文字列' style={{ minHeight: 100 }} />\n      </Form>\n      <div>\n        <h2>todoリスト</h2>\n        <ul>\n          <li>編集禁止にする -> できなかった</li>\n          <li>✅コピーボタンを作る</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'semantic-ui-css/semantic.min.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}